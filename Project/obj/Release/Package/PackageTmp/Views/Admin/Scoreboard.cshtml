@{ 
    ViewBag.Title = "ScoreBoard";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}
<head>
    <title></title>
    <script>$(document).ready(function () {
            $("#preloader").hide();
        });</script>
    <style>

        .p-0 {
            padding: 0px;
        }

        .bg-green {
            background-color: #017101 !important;
        }

        .bg-deepskyblue {
            background-color: #56C1FF;
            font-size: 18px;
        }

        .text-blue {
            color: blue;
        }

        .bg-light-green {
            background-color: #1DB100;
            color: white;
        }

        .table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > th, .table > thead > tr > td, .table > tbody > tr > td, .table > tfoot > tr > td {
            padding: 0px;
        }

        .score-board-outer {
            position: relative;
            min-width: 1190px;
        }

            .score-board-outer .score-board-row {
                position: relative;
                display: flex;
                flex-direction: row;
                flex-grow: 1;
            }

        .score-board-row .score-board-box {
            position: relative;
            display: flex;
            border-right: 1px solid #808080;
            border-bottom: 1px solid #808080;
            min-width: 40px;
            flex-grow: 1;
            text-align: center;
            align-items: center;
            justify-content: center;
            min-height: 40px;
            padding: 3px;
            font-weight: bold;
        }

        .score-board-row:first-child {
            border-top: 1px solid #808080;
        }

        .score-board-row .score-board-box:first-child {
            border-left: 1px solid #808080;
        }

        .popper-content {
            display: block;
            /*width: 88px;*/
            overflow: hidden;
            text-align: center;
            padding: 7px;
        }

        input[type="number"].popper-input {
            padding: 0px;
            width: 78px !important;
            float: left;
            padding-left: 3px;
            padding-right: 3px;
            text-align: center;
            font-size: 17px;
            height: 30px;
        }

        .box-heading {
            width: 120px;
            max-width: 120px;
        }

        .box-width {
            width: 50px;
            max-width: 50px;
        }

        .score-board-box .box-text {
            cursor: pointer;
        }

        .score-board-box.score-box {
            width: 50px;
            max-width: 50px;
        }

        .golf-score-outer {
            position: relative;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            justify-content: flex-end;
        }

            .golf-score-outer .golf-holes {
                align-self: center;
                font-size: 18px;
            }

        .golf-advantage-dot {
            position: relative;
            display: block;
            right: 0px;
            top: 0px;
            font-size: 8px;
        }

        .golfer-player .score-box {
            max-width: 50px;
        }
    </style>
</head>
<section class="content">
    <div class="row">
        <div class="col-xs-12">
            <script type="text/x-template" id="main-box-template">
                <div class="box box-default">
                    <div class="box-header">
                        <div>
                            <h1 class="box-title col-md-3" style="font-weight:bold; color:red; font-size:24px; padding-bottom:5px;">Score Board</h1>
                            <div class="form-group pull-right">
                                <button class="btn btn-success" v-on:click="UpdateBoard()" v-bind:disabled="isSaveBtnDisabled">Save Board</button>
                            </div>
                        </div>
                        <div class="box-body p-0">
                            <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12 p-0">
                                <div class="box box-primary">
                                    <div class="box-body">
                                        <div class="container" style="overflow-x:auto; width:100% !important;padding:0px;">
                                            <div class="score-board-outer">
                                                @*/////////////////////////
                                                        Hole
                                                    /////////////////////////*@
                                                <div class="score-board-row">
                                                    <div class="score-board-box box-heading bg-green">Hole</div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>1</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>2</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>3</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>4</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>5</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>6</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>7</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>8</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>9</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>O</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>10</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>11</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>12</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>13</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>14</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>15</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>16</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>17</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>18</span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span>In</span>
                                                    </div>
                                                    <div class="score-board-box bg-green"></div>
                                                </div>
                                                @*/////////////////////////
                                                        Yardage
                                                    /////////////////////////*@
                                                <div class="score-board-row">
                                                    <div class="score-board-box box-heading bg-light-green">Yardage</div>
                                                    <div class="score-board-box box-width" v-for="(yar, index) in yardages.firstHalf">
                                                        <popper trigger="click"
                                                                :options="{
                                                                  placement: 'top',
                                                                  modifiers: { offset: { offset: '0,10px' } }
                                                                }" v-bind:force-show="yar.show">
                                                            <div class="popper">
                                                                <div class="popper-content">
                                                                    <input class="popper-input" v-on:change="HoleValueInput(1)" type="number" v-model="yar.val" />
                                                                </div>
                                                            </div>
                                                            <span class="box-text" slot="reference">{{yar.val}}</span>
                                                        </popper>
                                                    </div>
                                                    <div class="score-board-box box-width">
                                                        <span class="box-text">{{firstHalfSum}}</span>
                                                    </div>
                                                    <div class="score-board-box box-width" v-for="(yar, index) in yardages.secondHalf">
                                                        <popper trigger="click"
                                                                :options="{
                                                                  placement: 'top',
                                                                  modifiers: { offset: { offset: '0,10px' } }
                                                                }">
                                                            <div class="popper">
                                                                <div class="popper-content">
                                                                    <input class="popper-input" v-on:change="HoleValueInput(1)" type="number" v-model="yar.val" />
                                                                </div>
                                                            </div>
                                                            <span class="box-text" slot="reference">{{yar.val}}</span>
                                                        </popper>
                                                    </div>
                                                    <div class="score-board-box box-width">
                                                        <span class="box-text">{{secondHalfSum}}</span>
                                                    </div>
                                                    <div class="score-board-box "></div>
                                                </div>
                                                @*/////////////////////////
                                                        Handicap
                                                    /////////////////////////*@
                                                <div class="score-board-row">
                                                    <div class="score-board-box box-heading bg-light-green">Handicap</div>
                                                    <div class="score-board-box box-width bg-green" v-for="(yar, index) in handicap.firstHalf">
                                                        <popper trigger="click"
                                                                :options="{
                                                                  placement: 'top',
                                                                  modifiers: { offset: { offset: '0,10px' } }
                                                                }">
                                                            <div class="popper">
                                                                <div class="popper-content">
                                                                    <input class="popper-input" v-on:change="HoleValueInput(2)" type="number" v-model="yar.val" />
                                                                </div>
                                                            </div>
                                                            <span class="box-text" slot="reference">{{yar.val}}</span>
                                                        </popper>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span class="box-text"></span>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green" v-for="(yar, index) in handicap.secondHalf">
                                                        <popper trigger="click"
                                                                :options="{
                                                                  placement: 'top',
                                                                  modifiers: { offset: { offset: '0,10px' } }
                                                                }">
                                                            <div class="popper">
                                                                <div class="popper-content">
                                                                    <input class="popper-input" v-on:change="HoleValueInput(2)" type="number" v-model="yar.val" />
                                                                </div>
                                                            </div>
                                                            <span class="box-text" slot="reference">{{yar.val}}</span>
                                                        </popper>
                                                    </div>
                                                    <div class="score-board-box box-width bg-green">
                                                        <span class="box-text"></span>
                                                    </div>
                                                    <div class="score-board-box bg-green"></div>
                                                </div>
                                                @*/////////////////////////
                                                        Par
                                                    /////////////////////////*@
                                                <div class="score-board-row">
                                                    <div class="score-board-box box-heading bg-light-green">Par</div>
                                                    <div class="score-board-box box-width" v-for="(yar, index) in par.firstHalf">
                                                        <popper trigger="click"
                                                                :options="{
                                                                  placement: 'top',
                                                                  modifiers: { offset: { offset: '0,10px' } }
                                                                }">
                                                            <div class="popper">
                                                                <div class="popper-content">
                                                                    <input class="popper-input" v-on:change="HoleValueInput(3)" type="number" v-model="yar.val" />
                                                                </div>
                                                            </div>
                                                            <span class="box-text" slot="reference">{{yar.val}}</span>
                                                        </popper>
                                                    </div>
                                                    <div class="score-board-box box-width">
                                                        <span class="box-text">{{par.firstHalfSum}}</span>
                                                    </div>
                                                    <div class="score-board-box box-width" v-for="(yar, index) in par.secondHalf">
                                                        <popper trigger="click"
                                                                :options="{
                                                                  placement: 'top',
                                                                  modifiers: { offset: { offset: '0,10px' } }
                                                                }">
                                                            <div class="popper">
                                                                <div class="popper-content">
                                                                    <input class="popper-input" v-on:change="HoleValueInput(3)" type="number" v-model="yar.val" />
                                                                </div>
                                                            </div>
                                                            <span class="box-text" slot="reference">{{yar.val}}</span>
                                                        </popper>
                                                    </div>
                                                    <div class="score-board-box box-width">
                                                        <span class="box-text">{{par.secondHalfSum}}</span>
                                                    </div>
                                                    <div class="score-board-box text-blue">Match</div>
                                                </div>
                                                @*/////////////////////////
                                                        Golfer 1
                                                    /////////////////////////*@
                                                <div class="score-board-row" v-for="(golfer, index) in golfers">
                                                    <div class="score-board-box box-heading bg-deepskyblue">{{golfer.Name}}</div>
                                                    <div class="score-board-box score-box" v-for="(vals, index1) in golfer.firstHalf" v-bind:class="{'bg-green': vals.Won === 1}">
                                                        <div class="golf-score-outer">
                                                            <span class="golf-advantage-dot">
                                                                <i class="fa fa-circle" v-for="dot in vals.dots"></i>
                                                            </span>
                                                            <popper trigger="click" :options="{placement: 'top',modifiers: { offset: { offset: '0,10px' } }}">
                                                                <div class="popper">
                                                                    <div class="popper-content">
                                                                        <input class="popper-input" v-on:change="GolferScoreChanged(1, index)" type="number" v-model="vals.val" />
                                                                    </div>
                                                                </div>
                                                                <span class="golf-holes" slot="reference">{{vals.val}}</span>
                                                            </popper>
                                                        </div>
                                                    </div>
                                                    <div class="score-board-box box-width">
                                                        <span class="box-text">{{sumArray(golfer.firstHalf)}}</span>
                                                    </div>
                                                    <div class="score-board-box score-box" v-for="(vals, index1) in golfer.secondHalf" v-bind:class="{'bg-green': vals.Won === 1}">
                                                        <div class="golf-score-outer">
                                                            <span class="golf-advantage-dot">
                                                                <i class="fa fa-circle" v-for="dot in vals.dots"></i>
                                                            </span>
                                                            <popper trigger="click" :options="{placement: 'top',modifiers: { offset: { offset: '0,10px' } }}">
                                                                <div class="popper">
                                                                    <div class="popper-content">
                                                                        <input class="popper-input" v-on:change="GolferScoreChanged(2, index)" type="number" v-model="vals.val" />
                                                                    </div>
                                                                </div>
                                                                <span class="golf-holes" slot="reference">{{vals.val}}</span>
                                                            </popper>
                                                        </div>
                                                    </div>
                                                    <div class="score-board-box box-width">
                                                        <span class="box-text">{{sumArray(golfer.firstHalf) + sumArray(golfer.secondHalf)}}</span>
                                                    </div>
                                                    <div class="score-board-box">{{calculateTotalWon(golfer)}}</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="container" style="width: 100%;">
                                            <div class="row">
                                                <div class="col-sm-6">
                                                    <div class="form-group">
                                                        <label>Course Slop</label>
                                                        <input class="form-control" v-on:change="GolferUpdated()" type="number" step="any" name="courseSlop" v-model="CourseSlop" />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-sm-6" v-for="golfer in golfers">
                                                    <h4>{{golfer.Name}}</h4>
                                                    <div class="form-group">
                                                        <label>Player Index</label>
                                                        <input class="form-control" v-on:change="GolferUpdated()" type="number" step="any" name="playerIndex1" v-model="golfer.PlayerIndex" />
                                                    </div>
                                                    <div class="form-group">
                                                        <label>Tee Boxes</label>
                                                        <input class="form-control" type="text" name="teeBoxes1" v-model="golfer.TeeBoxes" />
                                                    </div>
                                                    <div class="">
                                                        <label>Course Handicap for {{golfer.Name}}: </label> {{golfer.CourseHandicap}}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </script>
            <div id="vueapp">
                <main-box></main-box>
            </div>
            <script>Vue.component('main-box', {
                    template: '#main-box-template',
                    components: {
                        'popper': VuePopper
                    },
                    data: function () {
                        return {
                            MatchId: 1,
                            CourseSlop: 122,
                            yardages: {
                                'firstHalf': [
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false }
                                ],
                                'secondHalf': [
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false }
                                ],
                                isChanged: false
                            },
                            firstHalfSum: 0,
                            secondHalfSum: 0,
                            handicap: {
                                'firstHalf': [
                                    { val: 0, show: false, index: 0 },
                                    { val: 0, show: false, index: 1 },
                                    { val: 0, show: false, index: 2 },
                                    { val: 0, show: false, index: 3 },
                                    { val: 0, show: false, index: 4 },
                                    { val: 0, show: false, index: 5 },
                                    { val: 0, show: false, index: 6 },
                                    { val: 0, show: false, index: 7 },
                                    { val: 0, show: false, index: 8 }
                                ],
                                'secondHalf': [
                                    { val: 0, show: false, index: 0 },
                                    { val: 0, show: false, index: 1 },
                                    { val: 0, show: false, index: 2 },
                                    { val: 0, show: false, index: 3 },
                                    { val: 0, show: false, index: 4 },
                                    { val: 0, show: false, index: 5 },
                                    { val: 0, show: false, index: 6 },
                                    { val: 0, show: false, index: 7 },
                                    { val: 0, show: false, index: 8 }
                                ],
                                'firstHalfSum': 0,
                                'secondHalfSum': 0,
                                isChanged: false
                            },
                            par: {
                                'firstHalf': [
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false }
                                ],
                                'secondHalf': [
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false },
                                    { val: 0, show: false }
                                ],
                                'firstHalfSum': 0,
                                'secondHalfSum': 0,
                                isChanged: false
                            },
                            golfers: [
                                {
                                    Name: 'Golfer 1',
                                    CourseHandicap: 0,
                                    PlayerIndex: 18.2,
                                    TeeBoxes: '',
                                    firstHalf: [
                                        { val: 0, show: false, dots: 0 },
                                        { val: 5, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 8, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 }
                                    ],
                                    secondHalf: [
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 5, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 }
                                    ],
                                    isChnaged: false
                                },
                                {
                                    Name: 'Golfer 2',
                                    CourseHandicap: 0,
                                    PlayerIndex: 16,
                                    TeeBoxes: '',
                                    firstHalf: [
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 }
                                    ],
                                    secondHalf: [
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 },
                                        { val: 0, show: false, dots: 0 }
                                    ],
                                    isChnaged: false
                                }
                            ],
                            timeout: null
                        };
                    },
                    watch: {
                        golfers: {
                            deep: true,
                            handler: function () {
                            }
                        },
                        CourseSlop: function () {
                            this.calculateCourseHandicap();
                            this.calculatePlayerDots();
                        },
                        yardages: {
                            deep: true,
                            handler: function () {
                                setTimeout(() => {
                                    this.firstHalfSum = this.sumArray(this.yardages.firstHalf);
                                    this.secondHalfSum = this.firstHalfSum + this.sumArray(this.yardages.secondHalf);
                                }, 100);
                            }
                        },
                        handicap: {
                            deep: true,
                            handler: function () {
                                this.calculatePlayerDots();
                                setTimeout(() => {
                                    this.handicap.firstHalfSum = this.sumArray(this.handicap.firstHalf);
                                    this.handicap.secondHalfSum = this.handicap.firstHalfSum + this.sumArray(this.handicap.secondHalf);
                                }, 100);
                            }
                        },
                        par: {
                            deep: true,
                            handler: function () {
                                setTimeout(() => {
                                    this.par.firstHalfSum = this.sumArray(this.par.firstHalf);
                                    this.par.secondHalfSum = this.par.firstHalfSum + this.sumArray(this.par.secondHalf);
                                }, 100);
                            }
                        }
                    },
                    methods: {
                        GolferUpdated: function () {
                            this.calculateCourseHandicap();
                            this.calculatePlayerDots();
                            this.calculateWon();
                        },
                        GolferScoreChanged: function (type, index) {
                            this.golfers[index].isChanged = true;
                            this.calculateWon();
                        },
                        HoleValueInput: function (type) {
                            if (type === 1) {
                                this.yardages.isChanged = true;
                            } else if (type === 2) {
                                this.handicap.isChanged = true;
                            } else if (type === 3) {
                                this.par.isChanged = true;
                            }
                        },
                        sumArray: function (arr) {
                            var sum = 0;
                            for (var i = 0; i < arr.length; i++) {
                                if (arr[i].val != "" && arr[i].val != null) {
                                    sum = sum + parseInt(arr[i].val + "", 10);
                                }
                            }
                            return sum;
                        },
                        decendingIndexes: function (arr) {
                            var newArr = arr.slice();
                            var decendingIndexes = [];
                            var sortedArr = [];
                            for (var i = 0; i < newArr.length; i++) {
                                var min = i;
                                for (var j = i + 1; j < newArr.length; j++) {
                                    if (parseInt(newArr[j].val + '', 10) < parseInt(newArr[min].val + '', 10)) {
                                        min = j;
                                    }
                                }
                                var temp = newArr[i];
                                newArr[i] = newArr[min];
                                newArr[min] = temp;
                            }
                            return newArr.map(function (a) { return a.index; });
                        },
                        findMaxDotIndex: function (arr, indexes, val) {
                            for (var i = indexes.length - 1; i >= 0; i--) {
                                if (arr[indexes[i]].val <= val) {
                                    return i;
                                }
                            }
                            return nul;
                        },
                        calculatePlayerDots: function () {
                            for (var x = 0; x < this.golfers.length; x++) {
                                //console.log(this.golfers);
                                var golfer = this.golfers[x];
                                golfer.firstHalf.forEach((g) => {
                                    g.dots = 0;
                                });
                                golfer.secondHalf.forEach((g) => {
                                    g.dots = 0;
                                });
                                var sortedIndexes = this.decendingIndexes(this.handicap.firstHalf);
                                //console.log('sorted indexes', sortedIndexes);

                                var firstHalfDosts = Math.ceil(golfer.CourseHandicap / 2);
                                //console.log('fist half dots', firstHalfDosts);
                                var maxIndexToGo = this.findMaxDotIndex(this.handicap.firstHalf, sortedIndexes, firstHalfDosts);
                                //console.log('max index to go: ', maxIndexToGo);

                                var currentIndex = sortedIndexes[0];
                                for (var i = 0; i < firstHalfDosts; i++) {

                                    currentIndex = i % (maxIndexToGo + 1);
                                    golfer.firstHalf[sortedIndexes[currentIndex]].dots++;
                                }

                                //console.log('golfer with dots', golfer.firstHalf.map((a) => a.dots));

                                sortedIndexes = this.decendingIndexes(this.handicap.secondHalf);
                                var secondHalfDosts = Math.floor(golfer.CourseHandicap / 2);
                                var maxIndexToGo = this.findMaxDotIndex(this.handicap.secondHalf, sortedIndexes, secondHalfDosts);

                                var currentIndex = sortedIndexes[0];
                                for (var i = 0; i < secondHalfDosts; i++) {

                                    currentIndex = i % (maxIndexToGo + 1);
                                    golfer.secondHalf[sortedIndexes[currentIndex]].dots++;
                                }

                                //console.log('golfer with dots', golfer.secondHalf.map((a) => a.dots));
                            }
                        },
                        splitData: function (obj, type) {
                            if (type == 1) {
                                return [
                                    { val: obj.H1, show: false, index: 0 },
                                    { val: obj.H2, show: false, index: 1 },
                                    { val: obj.H3, show: false, index: 2 },
                                    { val: obj.H4, show: false, index: 3 },
                                    { val: obj.H5, show: false, index: 4 },
                                    { val: obj.H6, show: false, index: 5 },
                                    { val: obj.H7, show: false, index: 6 },
                                    { val: obj.H8, show: false, index: 7 },
                                    { val: obj.H9, show: false, index: 8 }
                                ];
                            } else if (type == 2) {
                                return [
                                    { val: obj.H10, show: false, index: 0 },
                                    { val: obj.H11, show: false, index: 1 },
                                    { val: obj.H12, show: false, index: 2 },
                                    { val: obj.H13, show: false, index: 3 },
                                    { val: obj.H14, show: false, index: 4 },
                                    { val: obj.H15, show: false, index: 5 },
                                    { val: obj.H16, show: false, index: 6 },
                                    { val: obj.H17, show: false, index: 7 },
                                    { val: obj.H18, show: false, index: 8 }
                                ];
                            }
                        },
                        getMatchDetails: function (matchId) {
                            axios.get(`/api/WebApis/GetMatchDetails?MatchId=${matchId}`).then(
                                res => {
                                    var yardageData = res.data.filter(d => d.Type === 1);
                                    if (yardageData.length > 0) {
                                        this.yardages.firstHalf = this.splitData(yardageData[0], 1);
                                        this.yardages.secondHalf = this.splitData(yardageData[0], 2);
                                    }
                                    var handicapData = res.data.filter(d => d.Type === 2);
                                    if (handicapData.length > 0) {
                                        this.handicap.firstHalf = this.splitData(handicapData[0], 1);
                                        this.handicap.secondHalf = this.splitData(handicapData[0], 2);

                                        this.calculatePlayerDots();
                                    }
                                    var parData = res.data.filter(d => d.Type === 3);
                                    if (parData.length > 0) {
                                        this.par.firstHalf = this.splitData(parData[0], 1);
                                        this.par.secondHalf = this.splitData(parData[0], 2);
                                    }

                                    //console.log(this.decendingIndexes(this.handicap.firstHalf));
                                }
                            ).catch(
                                error => {
                                }
                            );
                        },
                        getCompleteMatch: function (matchId) {
                            axios.get(`/api/WebApis/GetCommpleteMatch?MatchId=${matchId}`).then
                                (
                                    res => {
                                        if (res.data != null) {
                                            var data = res.data;
                                            this.MatchId = data.ID;
                                            this.CourseSlop = data.CourseSlop;

                                            for (var i = 0; i < data.Golfers.length; i++) {
                                                var golfer = data.Golfers[i];
                                                golfer.isChanged = false;
                                                if (golfer.Holes.length > 0) {
                                                    golfer.firstHalf = this.splitData(golfer.Holes[0], 1);
                                                    golfer.firstHalf.forEach((item) => {
                                                        item.Won = 0;
                                                    })
                                                    golfer.secondHalf = this.splitData(golfer.Holes[0], 2);
                                                    golfer.secondHalf.forEach((item) => {
                                                        item.Won = 0;
                                                    })
                                                }
                                            }
                                            this.golfers = res.data.Golfers;
                                            this.calculateCourseHandicap();
                                            this.calculatePlayerDots();
                                            this.calculateWon();
                                        }
                                    }
                            ).catch(
                                error => {
                                    console.log(error);
                                }
                            )

                        },
                        createHoleObj: function (type, arr, golferId = null) {
                            var obj = {
                                Type: type,
                                H1: arr[0].val,
                                H2: arr[1].val,
                                H3: arr[2].val,
                                H4: arr[3].val,
                                H5: arr[4].val,
                                H6: arr[5].val,
                                H7: arr[6].val,
                                H8: arr[7].val,
                                H9: arr[8].val,
                                H10: arr[9].val,
                                H11: arr[10].val,
                                H12: arr[11].val,
                                H13: arr[12].val,
                                H14: arr[13].val,
                                H15: arr[14].val,
                                H16: arr[15].val,
                                H17: arr[16].val,
                                H18: arr[17].val,
                                MatchId: this.MatchId,
                                GolfersId: golferId,
                                Updated: new Date()
                            };
                            return obj;
                        },
                        UpdateBoard: function () {
                            if (this.yardages.isChanged) {
                                var yardArr = [...this.yardages.firstHalf, ...this.yardages.secondHalf];
                                for (var i = 0; i < yardArr.length; i++) {
                                    yardArr[i].val = parseInt(yardArr[i].val + '', 10);
                                }

                                this.saveMatchRecord(this.createHoleObj(1, yardArr));
                                this.yardages.isChanged = false;
                            }
                            if (this.handicap.isChanged) {
                                var yardArr = [...this.handicap.firstHalf, ...this.handicap.secondHalf];
                                for (var i = 0; i < yardArr.length; i++) {
                                    yardArr[i].val = parseInt(yardArr[i].val + '', 10);
                                }
                                //console.log(this.createHoleObj(2, yardArr));

                                this.saveMatchRecord(this.createHoleObj(2, yardArr));
                                this.handicap.isChanged = false;
                            }
                            if (this.par.isChanged) {
                                var yardArr = [...this.par.firstHalf, ...this.par.secondHalf];
                                for (var i = 0; i < yardArr.length; i++) {
                                    yardArr[i].val = parseInt(yardArr[i].val + '', 10);
                                }

                                this.saveMatchRecord(this.createHoleObj(3, yardArr));
                                this.par.isChanged = false;
                            }
                            for (var i = 0; i < this.golfers.length; i++) {
                                if (this.golfers[i].isChanged) {
                                    var score = [...this.golfers[i].firstHalf, ...this.golfers[i].secondHalf];
                                    for (var j = 0; j < score.length; j++) {
                                        score[j].val = parseInt(score[j].val + '', 10);
                                    }
                                    this.saveMatchRecord(this.createHoleObj(4, score, this.golfers[i].ID));
                                    this.golfers[i].isChanged = false;
                                }
                            }

                        },
                        saveMatchRecord: function (holeData) {
                            axios.post('/api/WebApis/AddHoleRecord', holeData).then(
                                res => {
                                    if (res.data === 1) {
                                        this.getMatchDetails(this.MatchId);
                                        this.getCompleteMatch(this.MatchId);
                                    }
                                }
                            ).catch(
                                err => {
                                }
                            );
                        },
                        calculateTotalWon: function (golfer) {
                            var totalWon = 0;
                            for (var i = 0; i < golfer.firstHalf.length; i++) {
                                if (golfer.firstHalf[i].Won === 1) {
                                    totalWon++;
                                }
                            }
                            for (var i = 0; i < golfer.secondHalf.length; i++) {
                                if (golfer.secondHalf[i].Won === 1) {
                                    totalWon++;
                                }
                            }
                            return totalWon;
                        },
                        calculateWon: function () {
                            setTimeout(() => {
                                for (var i = 0; i < 9; i++) {
                                    this.amIWon(i, 1);
                                    this.amIWon(i, 2);
                                }
                            }, 1000);
                        },
                        amIWon: function (index, type) {
                            var smalest = null;
                            var smalestIndex = 0;
                            //if (this.golfers == null) {
                            //    this.golfers = [];
                            //}
                            //smalest = this.golfers[0];
                            //if (smalest != null) {
                            //    if (type === 1) {
                            //        smalest.firstHalf[index].Won = 1;
                            //    } else if (type === 2) {
                            //        smalest.secondHalf[index].Won = 1;
                            //    }
                            //}
                            if (this.golfers[smalestIndex] != null) {
                                if (type === 1) {
                                    this.golfers[smalestIndex].firstHalf[index].Won = 0;
                                }
                                if (type === 2) {
                                    this.golfers[smalestIndex].secondHalf[index].Won = 0;
                                }
                            }
                            for (var i = 0; i < this.golfers.length; i++) {
                                //if (smalest == null) {
                                //    smalest = this.golfers[0];
                                //    i = 0;
                                //    continue;
                                //}
                                if (type === 1) {
                                    if (this.golfers[i].firstHalf != null) {
                                        this.golfers[i].firstHalf[index].Won = 0;
                                        var myScore = parseInt(this.golfers[i].firstHalf[index].val, 10) - this.golfers[i].firstHalf[index].dots;
                                        var smalestScore = parseInt(this.golfers[smalestIndex].firstHalf[index].val, 10) - this.golfers[smalestIndex].firstHalf[index].dots;
                                        if (smalestScore < myScore) {
                                            this.golfers[smalestIndex].firstHalf[index].Won = 1;
                                        }
                                        if (myScore < smalestScore) {
                                            this.golfers[smalestIndex].firstHalf[index].Won = 0;
                                            smalestIndex = i;
                                            this.golfers[smalestIndex].firstHalf[index].Won = 1;
                                        } else if (myScore === smalestScore && i !== smalestIndex) {
                                            this.golfers[smalestIndex].firstHalf[index].Won = -1;
                                        }
                                        //if (index === 1) {
                                        //    console.log(myScore, smalestScore, smalestIndex, this.golfers[smalestIndex].firstHalf[index].Won, i);
                                        //}
                                    }
                                }
                                if (type === 2) {
                                    if (this.golfers[i].secondHalf != null) {
                                        this.golfers[i].secondHalf[index].Won = 0;
                                        var myScore = this.golfers[i].secondHalf[index].val - this.golfers[i].secondHalf[index].dots;
                                        var smalestScore = this.golfers[smalestIndex].secondHalf[index].val - this.golfers[smalestIndex].secondHalf[index].dots;
                                        if (smalestScore < myScore) {
                                            this.golfers[smalestIndex].secondHalf[index].Won = 1;
                                        }
                                        if (myScore < smalestScore) {
                                            this.golfers[smalestIndex].secondHalf[index].Won = 0;
                                            smalestIndex = i;
                                            this.golfers[smalestIndex].secondHalf[index].Won = 1;
                                        } else if (myScore === smalestScore) {
                                            this.golfers[smalestIndex].secondHalf[index].Won = -1;
                                        }
                                    }
                                }
                            }
                            if (smalestIndex != null) {
                                if (type === 1) {
                                    return this.golfers[smalestIndex].firstHalf[index].Won;
                                }
                                if (type === 2) {
                                    return this.golfers[smalestIndex].secondHalf[index].Won;
                                }
                            }
                            return 0;
                        },
                        calculateCourseHandicap: function () {
                            for (var i = 0; i < this.golfers.length; i++) {
                                this.golfers[i].CourseHandicap = Math.round((this.golfers[i].PlayerIndex * this.CourseSlop) / 115)
                            }
                        }
                    },
                    computed: {
                        isSaveBtnDisabled: {
                            cache: false,
                            get() {
                                for (var i = 0; i < this.golfers.length; i++) {
                                    if (this.golfers[i].isChanged) {
                                        return false;
                                    }
                                }
                                return !this.yardages.isChanged && !this.handicap.isChanged && !this.par.isChanged;
                            }
                        }
                    },
                    mounted: function () {
                        this.getMatchDetails(this.MatchId);
                        this.calculateCourseHandicap();

                        this.getCompleteMatch(this.MatchId);

                        this.firstHalfSum = this.sumArray(this.yardages.firstHalf);
                        this.secondHalfSum = this.firstHalfSum + this.sumArray(this.yardages.secondHalf);
                        this.handicap.firstHalfSum = this.sumArray(this.handicap.firstHalf);
                        this.handicap.secondHalfSum = this.handicap.firstHalfSum + this.sumArray(this.handicap.secondHalf);

                        this.par.firstHalfSum = this.sumArray(this.par.firstHalf);
                        this.par.secondHalfSum = this.par.firstHalfSum + this.sumArray(this.par.secondHalf);
                    }
                });

                var app = new Vue({
                    el: '#vueapp',
                    data: {
                        message: 'Hello Vue!'
                    },
                    components: {
                        'popper': VuePopper
                    }
                })</script>

        </div>
    </div>
</section>
<div class="modal" id="SingleCreate">
    <div class="modal-dialog">
        <div class="modal-content" style="border-radius: 5px !important;">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" style="font-weight:bold;" font-size:24px;">Add Single Coupon</h4>
            </div>
            <div class="box-body">
                <form action="../../Admin/SingleCreate" id="UpdateForm" method="post" class="form-horizontal" role="form">
                    <div class="form-group">
                        <label for="Name" class="col-sm-3 control-label">Coupon Code: <span style="color:red;">*</span></label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" required minLength="3" maxlength="200" id="Seller" name="Seller" placeholder="Enter Your Coupon Code">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="Name" class="col-sm-3 control-label">Assign Add: <span style="color:red;">*</span></label>
                        <div class="col-sm-9">
                            <select name="AddUnit" class="form-control" style="width:100%;">
                                <option value="Interstitial1">Interstitial1</option>
                                <option value="Bottom banner">Bottom banner</option>
                                <option value="Reward Video">Reward Video</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="Name" class="col-sm-3 control-label">Count: <span style="color:red;">*</span></label>
                        <div class="col-sm-9">
                            <input type="number" class="form-control" min="1" value="1" name="Count">
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-9 col-md-3">
                            <button type="submit" id="BtnAdmin" class="btn btn-success">Save changes</button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="modal" id="UpdateModel">
    <div class="modal-dialog">
        <div class="modal-content" style="border-radius: 5px !important;">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" style="font-weight:bold;" font-size:24px;">Update Single Coupon</h4>
            </div>
            <div class="box-body">
                <form action="../../Admin/UpdateCreate" id="UpdateForm" method="post" class="form-horizontal" role="form">
                    <input type="text" class="hidden" id="ID" name="ID" hidden>
                    <div class="form-group">
                        <label for="Name" class="col-sm-3 control-label">Coupon Code: <span style="color:red;">*</span></label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" minLength="3" maxlength="200" id="Coupon" name="Seller" placeholder="Enter Your Coupon Code">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="Name" class="col-sm-3 control-label">Assign Add: <span style="color:red;">*</span></label>
                        <div class="col-sm-9">
                            <select name="AddUnit" id="AddUnit" class="form-control" style="width:100%;">
                                <option value="Interstitial1">Interstitial1</option>
                                <option value="Bottom banner">Bottom banner</option>
                                <option value="Reward Video">Reward Video</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-9 col-md-3">
                            <button type="submit" id="BtnAdmin" class="btn btn-success">Save changes</button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

